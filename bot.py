from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import os
import asyncio
from db import init_db, add_user, get_user, get_tasks, complete_task, delete_task, add_task as db_add_task

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–¥–∞—á =====
def tasks_keyboard(tasks):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for i, (task_id, title, xp, is_done) in enumerate(tasks, start=1):
        if not is_done:
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"‚úÖ {title} (XP: {xp})",
                    callback_data=f"complete_{task_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{task_id}"
                )
            ])
    return kb

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
    ],
    resize_keyboard=True
)

# ===== FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ =====
class AddTask(StatesGroup):
    waiting_for_title = State()


# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ =====
CHANNEL_ID = -1002389424026       # ID –∫–∞–Ω–∞–ª–∞
CHANNEL = '@taskmasterr'          # @username –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π)

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ =====
CHANNEL_ID = -1002389424026
CHANNEL_LINK = "https://t.me/taskmasterr"

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "creator", "administrator"]
    except Exception:
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
def subscription_required(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        subscribed = await check_subscription(message.from_user.id)
        if not subscribed:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=CHANNEL_LINK)
                ]]
            )
            await message.answer("üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
            return
        return await func(message)
    return wrapper

# ===== /start =====
@dp.message(Command("start"))
@subscription_required
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username or "NoName")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu
    )

# ===== /profile =====
@dp.message(Command("profile"))
@dp.message(lambda msg: msg.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    user_id, username, xp, level, tasks_completed = user
    profile_text = (
        f"üë§ <b>{username}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"üíé –û–ø—ã—Ç: <b>{xp}</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: <b>{tasks_completed}</b>"
    )
    await message.answer(profile_text, parse_mode="HTML")

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ =====
@dp.message(Command("add_task"))
@dp.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTask.waiting_for_title)

@dp.message(AddTask.waiting_for_title)
async def add_task_finish(message: types.Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await db_add_task(message.from_user.id, title)
    await message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    tasks = await get_tasks(message.from_user.id)
    if tasks and any(t[3] == 0 for t in tasks):
        await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=tasks_keyboard(tasks))
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    await state.clear()

# ===== –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á =====
@dp.message(Command("tasks"))
@dp.message(lambda msg: msg.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def cmd_tasks(message: types.Message):
    tasks = await get_tasks(message.from_user.id)
    if not tasks or all(t[3] == 1 for t in tasks):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=tasks_keyboard(tasks))

# ===== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ =====
@dp.callback_query(lambda c: c.data and c.data.startswith("complete_"))
async def complete_task_callback(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    result = await complete_task(callback.from_user.id, task_id)
    if not result:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", show_alert=True)
        return
    msg = f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {result['xp_gain']} XP."
    if result["level_up"]:
        msg += f"\n\nüî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {result['new_level']}!"
    await callback.answer(msg, show_alert=True)
    tasks = await get_tasks(callback.from_user.id)
    if tasks and any(t[3] == 0 for t in tasks):
        await callback.message.edit_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=tasks_keyboard(tasks))
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")

# ===== –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ =====
@dp.callback_query(lambda c: c.data and c.data.startswith("delete_") and not c.data.startswith("delete_confirm_") and c.data != "delete_cancel")
async def delete_task_confirm(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    tasks = await get_tasks(callback.from_user.id)
    task_titles = {t[0]: (i+1, t[1]) for i, t in enumerate(tasks) if t[3] == 0}
    if task_id not in task_titles:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)
        return
    num, title = task_titles[task_id]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_confirm_{task_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="delete_cancel")
        ]
    ])
    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: <b>{title}</b>? üóë",
                                     reply_markup=kb, parse_mode="HTML")

@dp.callback_query(lambda c: c.data and c.data.startswith("delete_confirm_"))
async def delete_task_callback(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    success = await delete_task(callback.from_user.id, task_id)
    if success:
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è", show_alert=True)
    else:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)
    tasks = await get_tasks(callback.from_user.id)
    if tasks and any(t[3] == 0 for t in tasks):
        await callback.message.edit_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=tasks_keyboard(tasks))
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")

@dp.callback_query(lambda c: c.data == "delete_cancel")
async def delete_cancel(callback: CallbackQuery):
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", show_alert=True)
    tasks = await get_tasks(callback.from_user.id)
    if tasks and any(t[3] == 0 for t in tasks):
        await callback.message.edit_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=tasks_keyboard(tasks))
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")

@dp.message(Command("leaderboard"))
async def leaderboard_cmd(message: types.Message):
    from db import get_leaderboard
    top_users = await get_leaderboard()
    if not top_users:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return

    text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (username, level, xp, tasks_completed) in enumerate(top_users, start=1):
        text += f"{i}. {username} ‚Äî ‚≠ê {level}, üíé {xp} XP, ‚úÖ {tasks_completed} –∑–∞–¥–∞—á\n"

    await message.answer(text)

@dp.message(lambda msg: msg.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def leaderboard_button(message: types.Message):
    await leaderboard_cmd(message)

# ===== main =====
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
